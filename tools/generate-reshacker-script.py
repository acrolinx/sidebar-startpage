#!/usr/bin/env python2
#
# Copyright 2017 Acrolinx GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import os.path
import string
import sys
import traceback


_SCRIPT_TEMPLATE = """\
// Automatically generated by {script_name}

[FILENAMES]
Open   = {base_dll}
SaveAs = {target_dll}
Log    = {logfile}

[COMMANDS]
{commands}
"""


def raise_error_without_traceback(exc):
    raise exc, None, sys.exc_info()[2]

def escape_path(path):
    return '"%s"' % path.replace('"', r'\"')

def make_argparser():
    p = argparse.ArgumentParser(
            description="Generate a Resource Hacker script that packages "
                        "the contents of a directory into a DLL."
        )

    p.add_argument(
        "-b", "--base-dll",
        default="Empty.dll",
        help="DLL to use as a base. Default: %(default)s"
    )

    p.add_argument(
        "-t", "--resource-type",
        default="RCDATA",
        help="Type to specify for the packaged resources. Default: "
             "%(default)s"
    )

    p.add_argument(
        "-l", "--resource-language",
        type=int,
        default=0,
        help="Numeric language code to specify for the packaged "
             "resources. Default: %(default)s"
    )

    p.add_argument(
        "-L", "--script-logfile",
        default="CONSOLE",
        help="Where should Resource Hacker write its log to? "
             "Default: %(default)s"
    )

    p.add_argument(
        "-o", "--output",
        type=argparse.FileType("wt"),
        default="-",
        help="Where to write the script to. Defaults to stdout."
    )

    p.add_argument(
        "target_dll",
        help="Name of the DLL that the script generates when ran using "
             "Resource Hacker."
    )

    p.add_argument(
        "data_directory",
        nargs="+",
        help="Directory containing the files to package into the DLL."
    )

    return p

def main():
    args = make_argparser().parse_args()

    commands = []
    for directory in args.data_directory:
        commands.append("// Source: %s" % directory)

        for parent, _, files in os.walk(
                    directory,
                    onerror=raise_error_without_traceback
                ):
            commands.extend(
                "-addoverwrite %s, %s,%s,%d" % (
                    escape_path(os.path.join(parent, path)),
                    args.resource_type,
                    escape_path(
                        os.path.relpath(
                            os.path.join(parent, path),
                            directory
                        )
                    ).replace("\\", "/"),
                    args.resource_language
                ) for path in files
            )

    print >> args.output, _SCRIPT_TEMPLATE.format(
            script_name=os.path.basename(sys.argv[0]),
            base_dll=escape_path(args.base_dll),
            target_dll=escape_path(args.target_dll),
            logfile=escape_path(args.script_logfile),
            commands="\n".join(commands)
        ),


if __name__ == "__main__":
    sys.exit(main())
